" Fletcher Woodruff's .vimrc

set nocompatible " Remove vi compatibility. This must always be first
filetype off
set rtp+=~/.dotfiles/dependencies/vundle

call vundle#begin('~/.dotfiles/vim/plugins')

" Let Vundle  manage itself
Plugin 'VundleVim/Vundle.vim'

" ----- Sexy colors and UI stuff --------------------------------------
Plugin 'bling/vim-airline'
Plugin 'chriskempson/base16-vim'
Plugin 'nanotech/jellybeans.vim'
Plugin 'morhetz/gruvbox'

" ----- Vim as a programmer's text editor -----------------------------
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'scrooloose/syntastic'
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-easytags'
Plugin 'majutsushi/tagbar'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'vim-scripts/a.vim'
Plugin 'LaTeX-Box-Team/LaTeX-Box'
Plugin 'cmugpi/vim-c0'
Plugin 'easymotion/vim-easymotion'
Plugin 'rking/ag.vim'

" ----- Working with Git ----------------------------------------------
Plugin 'airblade/vim-gitgutter'
Plugin 'mhinz/vim-signify'
Plugin 'tpope/vim-fugitive'

" ----- Other text editing features -----------------------------------
"Plugin 'Raimondi/delimitMate'
Plugin 'tpope/vim-surround'

" ---- Extras/Advanced plugins ----------------------------------------
" Highlight and strip trailing whitespace
Plugin 'ntpeters/vim-better-whitespace'
" Automatically insert the closing HTML tag
Plugin 'HTML-AutoCloseTag'
" Make tmux look like vim-airline (read README for extra instructions)
"Plugin 'edkolev/tmuxline.vim'

Plugin 'Valloric/YouCompleteMe' " Requires extra config stuff

call vundle#end()

filetype plugin indent on

" CtrlP settings

" Use ag if we have it
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

let g:ctrlp_match_window = 'bottom,order:ttb'
let g:ctrlp_by_filename = 1
let g:ctrlp_root_markers = ['Makefile']
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_lazy_update = 1


let g:syntastic_C_checkers = ['gcc']
let g:syntastic_tex_checkers = ['chktex']

" Make tabbing sane (width 2)
set expandtab
set smarttab
set tabstop=2
set softtabstop=2
set shiftwidth=2

syntax enable               " Enable syntax highlighting
set number                  " Enable line numbers
set autoindent              " Autoindent on new lines
set ruler                   " Show bottom ruler
set showmatch               " Highlight matching braces
set formatoptions=croq      " Enable comment line auto formatting
set t_Co=256                " 256 color
set encoding=utf-8          " UTF-8 character encoding
set title                   " Set window title to file
set hlsearch                " Highlight on search
set ignorecase              " Search ignoring case
set smartcase               " Search using smartcase
set incsearch               " Start searching immediately
set scrolloff=5             " Never scroll off
set wildmode=longest,list   " Better unix-like tab completion
set cursorline              " Highlight current line
set clipboard=unnamed       " Copy and paste from system clipboard
set lazyredraw              " Don't redraw while running macros (faster)
set autochdir               " Change directory to currently open file
set wrap                    " Visually wrap lines
set linebreak               " Only wrap on 'good' characters for wrapping
set splitright              " Vertical splits use right half of screen
set splitbelow              " Horizontal splits use bottom half of screen
set timeoutlen=1000         " Lower ^[ timeout
set fillchars=fold:\ ,      " get rid of obnoxious '-' characters in folds
set ttyfast                 " Speed up vim
set nostartofline           " Vertical movement preserves horizontal position
set showcmd

set background=dark
colorscheme gruvbox

hi Normal             ctermbg=NONE
hi Statement          ctermbg=NONE
hi Title              ctermbg=NONE
hi Todo               ctermbg=NONE
hi Underlined         ctermbg=NONE
hi ErrorMsg           ctermbg=NONE
hi LineNr             ctermbg=NONE

" Show potential matches above completion, complete first immediately
set wildmenu
set wildmode=full

set mouse=a

" Force write readonly files using sudo
command! WS w !sudo tee %

" Make navigating long, wrapped lines behave like normal lines
noremap <silent> k gk
noremap <silent> j gj
noremap <silent> 0 g0
noremap <silent> $ g$
noremap <silent> ^ g^
noremap <silent> _ g_

" use 'Y' to yank to the end of a line, instead of the whole line
noremap <silent> Y y$

" ----- Plugin-Specific Settings --------------------------------------

" ----- bling/vim-airline settings -----
" Always show statusbar
set laststatus=2

" Fancy arrow symbols, requires a patched font
" To install a patched font, run over to
"     https://github.com/abertsch/Menlo-for-Powerline
" download all the .ttf files, double-click on them and click "Install"
" Finally, uncomment the next line
let g:airline_powerline_fonts = 1

" Show PASTE if in paste mode
let g:airline_detect_paste=1

" Show airline for tabs too
let g:airline#extensions#tabline#enabled = 1


" ----- jistr/vim-nerdtree-tabs -----
" Open/close NERDTree Tabs with \t
nmap <silent> <leader>t :NERDTreeTabsToggle<CR>
" To have NERDTree always open on startup
let g:nerdtree_tabs_open_on_console_startup = 0

" ----- scrooloose/syntastic settings -----
let g:syntastic_error_symbol = 'x'
" let g:syntastic_warning_symbol = "â–²"
augroup mySyntastic
  au!
  au FileType tex let b:syntastic_mode = "passive"
augroup END

" ----- xolox/vim-easytags settings -----
" Where to look for tags files
set tags=./tags;,~/.vimtags
" Sensible defaults
let g:easytags_events = ['BufReadPost', 'BufWritePost']
let g:easytags_async = 1
let g:easytags_dynamic_files = 2
let g:easytags_resolve_links = 1
let g:easytags_suppress_ctags_warning = 1

" ----- majutsushi/tagbar settings -----
" Open/close tagbar with \b
nmap <silent> <leader>b :TagbarToggle<CR>
" Uncomment to open tagbar automatically whenever possible
"autocmd BufEnter * nested :call tagbar#autoopen(0)


" ----- airblade/vim-gitgutter settings -----
" Required after having changed the colorscheme
hi clear SignColumn
" In vim-airline, only display "hunks" if the diff is non-zero
let g:airline#extensions#hunks#non_zero_only = 1

" ----- Raimondi/delimitMate settings -----
let delimitMate_expand_cr = 1
augroup mydelimitMate
  au!
  au FileType markdown let b:delimitMate_nesting_quotes = ["`"]
  au FileType tex let b:delimitMate_quotes = ""
  au FileType tex let b:delimitMate_matchpairs = "(:),[:],{:},`:'"
  au FileType python let b:delimitMate_nesting_quotes = ['"', "'"]
augroup END

" Tabs are tabs in Makefiles
augroup configgroup
    autocmd!
    autocmd BufEnter Makefile setlocal noexpandtab
augroup END

nmap \q :nohlsearch<CR>

autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" SML signature files
au BufRead,BufNewFile *.sig setlocal filetype=sml

" Ignore junk files
set wildignore+=*.o,*.obj,*.class,*.swp,*.pyc

" Refresh .vimrc with <leader>sv
nmap <leader>sv :source ~/.vimrc<CR>

" Reload .vimrc after saving
autocmd! BufWritePost ~/.vimrc nested :source ~/.vimrc

" Run a make file with <F5>
:nmap <F5> :make<CR>

" Jump to editing last buffer
:nmap <C-e> :e#<CR>

" Jump to editing next buffer
:nmap <C-j> :bnext<CR>

" Jump to editing previous buffer
:nmap <C-k> :bprev<CR>

" Easy motions with Ctrl+m
:nmap <C-m> <Plug>(easymotion-prefix)

" Quick open/close for Nerd Tree
:nmap <leader>e :NERDTreeToggle<CR>
"
" Add date to line 
:nmap <leader>d :r !date +"\#\# \%a, \%-d \%b \%Y - \%-I:\%M \%p"<CR>

" Jump to definition
:nmap <leader>j :YcmCompleter GoTo<cr>

" Leader + w to save
nnoremap <Leader>w :w<CR>

"Remove all trailing whitespace by pressing F6
"nnoremap <F6> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar><CR>

" kj is escape
inoremap kj <esc>

" Fast searching
nnoremap <leader>a :Ag

" If you prefer the Omni-Completion tip window to close when a selection is
" made, these lines close it on movement in insert mode or when leaving
" insert mode
" Change to silent! pclose to preserve command edit window
autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

" Only use YCM for C, C++, and Python
let g:ycm_filetype_whitelist = { 'c': 1, 'cpp': 1, 'python': 1 }

autocmd VimEnter * nested :source ~/.vimrc
